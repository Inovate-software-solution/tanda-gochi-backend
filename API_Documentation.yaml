openapi: '3.0.3'
info:
  title: ISS Capstone API
  version: '1.0'
  description: |
    ## This is the API documentation for the ISS Capstone project.
    ## For more information, please contact the developers.
servers:
  - url: https://capstone.marcusnguyen.dev/api
    description: Production server
  - url: http://localhost:3001/api
    description: Local server


paths:
  # Devices
  # /Devices:
  #   get:
  #     summary: Get all registered devices
  #     tags:
  #       - Devices
  #     responses:
  #       '200':
  #         description: "Returns all registered devices"
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: object
  #                 example: 
  #                   _id: "123123123"
  #                   Name: "Front-door device"
  #                   Description: "This is device at the front door"
  #                   Status: "ACTIVE"
  #                   AuthToken: "1234567890"
  #       "401":
  #         description: "Unauthorized"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Unauthorized"

  #       '500':
  #         description: "Internal server error"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Internal server error"
  #     security:
  #       - bearerAuth: []
  
  # /Devices/{_id}:
  #   get:
  #     summary: Get device by ID
  #     tags:
  #       - Devices
  #     parameters:
  #       - in: path
  #         name: _id
  #         schema:
  #           type: integer
  #         required: true
  #         description: Generated ID of the device to get
  #     responses:
  #       '200':
  #         description: Get all registered devices
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example:
  #                   _id: 1
  #                   Name: "Front-door device"
  #                   Description: "This is device at the front door"
  #                   Status: "ACTIVE"
  #                   AuthToken: "1234567890"
  #       "401":
  #         description: "Unauthorized"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Unauthorized"
  #       "404":
  #         description: "Device not found"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Device not found"

  #       '500':
  #         description: "Internal server error"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Internal server error"
  #     security:
  #       - bearerAuth: []
    
  # /Devices/update/{_id}:
  #   put:
  #     tags:
  #     - Devices
  #     parameters:
  #       - in: path
  #         name: _id
  #         schema:
  #           type: integer
  #         required: true
  #         description: Generated ID of the device to update
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               Name:
  #                 type: string
  #                 example: "Front-door device"
  #               Description:
  #                 type: string
  #                 example: "This is device at the front door"
  #               Status:
  #                 type: string
  #                 example: "ACTIVE"
  #               AuthToken:
  #                 type: string
  #                 example: "1234567890"
  #             required:
  #               - Name
  #               - Description
  #               - Status
  #               - AuthToken
  #     responses:
  #       '201':
  #         description: Device updated successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: false
  #                 message: "Device updated successfully!"
  #       '401':
  #         description: "Unauthorized"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Unauthorized"
  #       '400':
  #         description: "Bad request"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Detail of missing or mailformed request body"
  #       '404':
  #         description: "Device not found"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Device not found"
  #       '500':
  #         description: "Internal server error"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Internal server error"
  #     security:
  #         - bearerAuth: []

  # /Devices/delete/{_id}:
  #   delete:
  #     tags:
  #     - Devices
  #     parameters:
  #       - in: path
  #         name: _id
  #         schema:
  #           type: integer
  #         required: true
  #         description: Generated ID of the device to delete
  #     responses:
  #       '201':
  #         description: Device deleted successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: false
  #                 message: "Device deleted successfully!"
  #       '401':
  #         description: "Unauthorized"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Unauthorized"
  #       '404':
  #         description: "Device not found"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Device not found"
  #       '500':
  #         description: "Internal server error"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Internal server error"

  #     security:
  #         - bearerAuth: []
            
  # /Devices/CheckToken:
  #   post:
  #     tags:
  #     - Devices
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               AuthToken:
  #                 type: string
  #                 example: "1234567890"
  #             required:
  #               - AuthToken
  #     responses:
  #       '201':
  #         description: Token is valid
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: false
  #                 message: "Token is valid!"
  #       '401':
  #         description: "Unauthorized"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Unauthorized"
  #       '400':
  #         description: "Bad request"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Detail of missing or mailformed request body"
  #       '500':
  #         description: "Internal server error"
  #         content:
  #           application/json:
  #             schema:y
  #               type: object
  #               example: 
  #                 error: true
  #                 message: "Internal server error"

  /Clocking/clockin:
    post:
      summary: Perfom clock in/out for user and calculate score/credit
      tags:
        - Clocking
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Passcode:
                  type: string
                  example: "1234"
                GameResult:
                  type: string
                  example: "'win' or 'lose' or 'draw'"                
                DeviceToken:
                  type: string
                  example: "1234567890"
              required:
                - UserId
                - DeviceId
                - DeviceToken
                - Type
      responses:
        "200":
          description: Clock in/out successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Clock in/out successfully!"
        "400":
          $ref: '#/components/responses/BadRequestError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  # Users
  /Users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: Returns all registered users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        '500': 
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /Users/{_id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: ID of user generated by MongoDB
      responses:
        '200':
          description: Returns all registered users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        '500': 
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /Users/current:
    get:
      summary: Get user by ID
      tags:
        - Users
      responses:
        '200':
          description: Returns current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        '500': 
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /Users/register:
    post:
      tags:
      - Users
      summary: Register a new user
      description: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                  example: "demo_account_user199087+1@tanda.co"
                Password:
                  type: string
                  example: "This should be a Password"
                
              required:
                - Password
                - Email
      responses:
        '201':
          description: User added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User added successfully!"
                  
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          description: User already existed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User already existed!"
        '500':
          $ref: '#/components/responses/InternalServerError'    

  /Users/login:
    post:
      tags:
      - Users
      summary: Log a user in
      description: Login a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                  example: "demo_account_user199087+1@tanda.co"
                Password:
                  type: string
                  example: "This should be a Password"
                
              required:
                - Password
                - Email
      responses:
        '201':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  token: "dfgwrtgsadgqewsdgewew (Generaly a JWT token)"
                  Scope: ["user","admin"]
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /Users/checkUser:
    post:
      tags:
      - Users
      summary: Check if user exists
      description: Check if user exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                  example: "demo_account_user199087+1@tanda.co"
              required:
                - Email
      responses:
        '200':
          description: User exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User exists and registered!"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          description: |
            There are two types of `404 Not Found` responses that this API may return.
            
            ### Type 1: User Not Found
            When the user is not found, the response will be:
            ```json
            {
              "error": true,
              "message": "User does not exists."
            }
            ```
            
            ### Type 2: User Found on Tanda Database but not registered
            When no data is found for the query, the response will be:
            ```json
            {
              "error": true,
              "message": "User exists but not registered."
            }
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    type: string
              examples:
                userNotExist:
                  summary: "User Does Not Exist"
                  value:
                    error: true
                    message: "User does not exist."
                userNotRegistered:
                  summary: "User Exists but Not Registered"
                  value:
                    error: true
                    message: "User exists but not registered."
        '500':
          $ref: '#/components/responses/InternalServerError'

  /Users/changePassword:
    put:
      tags:
      - Users
      summary: Change user password
      description: Change user password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                  example: "demo_account_user199087+1@tanda.co"
                Password:
                  type: string
                  example: "This should be a Password"
                NewPassword:
                  type: string
                  example: "This should be a Password"
              required:
                - Password
                - Email
                - NewPassword
      responses:
        '201':
          description: User password changed successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "User password changed successfully!"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /Users/delete/{_id}:
    delete:
      tags:
      - Users
      summary: Delete a user
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: ID of user generated by MongoDB
      responses:
        '201':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Success"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []

  # Users utils
  /Users/current/badges:
    get:
      summary: Get badges of current user
      tags:
        - Users utils
      responses:
        '200':
          description: Returns badges of a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        '500': 
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
  
  /Users/:_id/badges:
    get:
      summary: Get badges of a user by Id
      tags:
        - Users utils
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: ID of the user
      responses:
        '200':
          description: Get badges of a user by Id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        '500': 
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /Users/current/inventory:
    get:
      summary: Return the inventory of current user
      tags:
        - Users utils
      responses:
        '200':
          description: Returns badges of a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  Inventory:
                    type: array
                    items: 
                      type: object
                      properties:
                        ItemId:
                          type: string
                        Quantity:
                          type: integer
                  OutfitsInventory:
                    type: array
                    items: 
                      type: object
                      properties:
                        OutfitId:
                          type: string
                        Equipped:
                          type: boolean
                  ToysInventory:
                    type: array
                    items: 
                      type: object
                      properties:
                        ToyId:
                          type: string
                example:
                  Inventory:
                  - ItemId: "item1"
                    Quantity: 5
                  - ItemId: "item2"
                    Quantity: 2
                  OutfitsInventory:
                  - OutfitId: "outfit1"
                    Equipped: true
                  - OutfitId: "outfit2"
                    Equipped: false
                  ToysInventory:
                  - ToyId: "toy1"
                  - ToyId: "toy2"               
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        '500': 
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /Users/:id/inventory:
    get:
      summary: Return the inventory of current user
      tags:
        - Users utils
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: ID of the user  
      responses:
        '200':
          description: Returns badges of a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  Inventory:
                    type: array
                    items: 
                      type: object
                      properties:
                        ItemId:
                          type: string
                        Quantity:
                          type: integer
                  OutfitsInventory:
                    type: array
                    items: 
                      type: object
                      properties:
                        OutfitId:
                          type: string
                        Equipped:
                          type: boolean
                  ToysInventory:
                    type: array
                    items: 
                      type: object
                      properties:
                        ToyId:
                          type: string
                example:
                  Inventory:
                  - ItemId: "item1"
                    Quantity: 5
                  - ItemId: "item2"
                    Quantity: 2
                  OutfitsInventory:
                  - OutfitId: "outfit1"
                    Equipped: true
                  - OutfitId: "outfit2"
                    Equipped: false
                  ToysInventory:
                  - ToyId: "toy1"
                  - ToyId: "toy2"               
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        '500': 
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /Users/addcredits:
    post:
      summary: Add credit to target users
      tags:
        - Users utils
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                TargetUserId:
                  type: string
                  example: "123123123 (Id generated by MongoDB)"
                Credits:
                  type: integer
                  example: 100
              required:
                - TargetUsersId
                - Credits
      responses:
        "200":
          description: Credits added successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Success"  
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
  # User Actions
  /User/action/buy/item:
    post:
      tags:
      - User Actions
      summary: Buy an item
      description: Buy an item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ItemId:
                  type: string
                  example: "311231212 (Id generated by MongoDB)"
                Quantity:
                  type: integer
                  example: 10
              required:
                - ItemId
                - Quantity
      responses:
        '200':
          description: The item bought successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Item bought successfully!"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: User does not have enough credit
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    type: string
              examples:
                userNotEnoughCredit:
                  summary: "User Does Not Have Enough Credits"
                  value:
                    error: true
                    message: "User does not have enough credit."
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []

  /User/action/use/item:
    post:
      tags:
      - User Actions
      summary: Use an item
      description: Use an item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ItemId:
                  type: string
                  example: "311231212 (Id generated by MongoDB)"
              required:
                - ItemId
      responses:
        '200':
          description: The item used successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    type: string
              examples:
                itemUsed:
                  summary: "Item Used"
                  value:
                    error: false
                    message: "Item used successfully!"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: User does not have enough item
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    type: string
              examples:
                userDoNotHaveItem:
                  summary: "User Does Not Have Item"
                  value:
                    error: true
                    message: "User does not have item."
                userNotEnoughItem:
                  summary: "User Does Not Have Enough Item"
                  value:
                    error: true
                    message: "User does not have enough item."
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []
  
  /User/action/buy/outfit:
    post:
      tags:
      - User Actions
      summary: Buy an outfit
      description: Buy an outfit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                OutfitId:
                  type: string
                  example: "311231212 (Id generated by MongoDB)"
              required:
                - OutfitId
      responses:
        '200':
          description: The outfit bought successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Outfit bought successfully!"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: User does not have enough credit
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    type: string
              examples:
                userNotEnoughCredit:
                  summary: "User Does Not Have Enough Credits"
                  value:
                    error: true
                    message: "User does not have enough credit."
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []

  /User/action/equip/outfit:
    post:
      tags:
      - User Actions
      summary: Equip an outfit
      description: Equip an outfit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                OutfitId:
                  type: string
                  example: "311231212 (Id generated by MongoDB)"
              required:
                - OutfitId
      responses:
        '200':
          description: The outfit Equipped successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Outfit bought successfully!"
        '304':
          description: The outfit is already equipped
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    type: string
              examples:
                outfitAlreadyEquipped:
                  summary: "Outfit Already Equipped"
                  value:
                    error: true
                    message: "Outfit already equipped."
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: User does not have the outfit
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    type: string
              examples:
                userNotHaveOutfit:
                  summary: "User does Not Have the outfit"
                  value:
                    error: true
                    message: "User does Not Have the outfit."
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []

  /User/action/buy/toy:
    post:
      tags:
      - User Actions
      summary: Buy an toy
      description: Buy an toy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ToyId:
                  type: string
                  example: "311231212 (Id generated by MongoDB)"
              required:
                - ToyId
      responses:
        '200':
          description: The toy bought successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Outfit bought successfully!"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: User does not have enough credit
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    type: string
              examples:
                userNotEnoughCredit:
                  summary: "User Does Not Have Enough Credits"
                  value:
                    error: true
                    message: "User does not have enough credit."
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []

  # Badges
  /Badges:
    get:
      summary: Get all badges
      tags:
        - Badges
      responses:
        '200':
          description: Returns all registered badges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
                    
        "401":
          $ref: '#/components/responses/UnauthorizedError'

        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /Badges/{_id}:
    get:
      summary: Get badge by ID
      tags:
        - Badges
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: ID of the Badge that generated by MongoDB
      responses:
        '200':
          $ref: '#/components/schemas/Badge'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /Badges/upload:
    post:
      summary: Create a badge
      tags:
      - Badges
      requestBody:
        description: |
          - This endpoint only accpet multipart/form-data as it is an upload. 
          
          - If you are using multipart/form-data, please use the key `file` for the image file.

          - `Description` is optional.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                Title:
                  type: string
                  example: "Badge 1"
                Description:
                  type: string
                  example: "This is badge 1"
          application/json:
            schema:
              type: object
              properties:
                Title:
                  type: string
                  example: "Badge 1"
                Description:
                  type: string
                  example: "This is badge 1"
              required:
                - Title
      responses:
        '201':
          description: Badge created successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Badge created successfully!"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []

  /Badges/update/{_id}:
    put:
      summary: Update a badge
      tags:
      - Badges
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: Generated ID of the badge to update
      requestBody:
        description: |
          - This endpoint can accpet both multipart/form-data as it is edit. 
          
          - If you are using multipart/form-data, please use the key `file` for the image file.

          - `file` is optional

          - `Description` is optional.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                Title:
                  type: string
                  example: "Badge 1"
                Description:
                  type: string
                  example: "This is badge 1"
          application/json:
            schema:
              type: object
              properties:
                Title:
                  type: string
                  example: "Badge 1"
                Description:
                  type: string
                  example: "This is badge 1"
              required:
                - Title
                - Description
      responses:
        '201':
          description: Badge updated successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Badge updated successfully!"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Unauthorized"
        '400': 
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

      security:
          - bearerAuth: []

  /Badges/delete/{_id}:
    delete:
      summary: Delete a badge
      tags:
      - Badges
      parameters:
        - in: path
          name: _id
          schema:
            type: integer
          required: true
          description: Generated ID of the badge to delete
      responses:
        '201':
          description: Badge deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Badge deleted successfully!"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Unauthorized"
        '404':
          description: "Badge not found"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Badge not found"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Internal server error"

      security:
          - bearerAuth: []

  /Badges/user/{user_id}:
    get:
      summary: Get all badges of a user
      tags:
        - Badges
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user generated by MongoDB
      responses:
        '200':
          description: Returns an array of badge id and date awarded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    BadgeId:
                      type: string
                      example: "123123123 (Id generated by MongoDB)"
                    DateAwarded:
                      type: string
                      example: "16854345345 (unix timestamp)"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  # Badge Actions
  /Badge/action/grant:
    post:
      summary: Grant a badge to a user
      tags:
      - Badge Actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                UserId:
                  type: string
                  example: "123123123 (Id generated by MongoDB)"
                BadgeId:
                  type: string
                  example: "123123123 (Id generated by MongoDB)"
              required:
                - UserId
                - BadgeId
      responses:
        '201':
          description: Badge granted successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Badge granted successfully!"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []
  
  /Badge/action/revoke:
    post:
      summary: Revoke a badge from a user
      tags:
      - Badge Actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                UserId:
                  type: string
                  example: "123123123 (Id generated by MongoDB)"
                BadgeId:
                  type: string
                  example: "123123123 (Id generated by MongoDB)"
              required:
                - UserId
                - BadgeId
      responses:
        '201':
          description: Badge revoked successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Badge revoked successfully!"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []
  
  # Items
  /items:
    get:
      summary: Get all items
      tags:
        - Items
      responses:
        '200':
          description: Returns all registered items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
                    
        "401":
          $ref: '#/components/responses/UnauthorizedError'

        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
    
  /items/{_id}:
    get:
      summary: Get item by ID
      tags:
        - Items
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: ID of the item that generated by MongoDB
      responses:
        '200':
          description: Returns all registered items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /items/upload:
    post:
      summary: Create an item
      tags:
      - Items
      requestBody:
        description: |
          - This endpoint only accpet multipart/form-data as it is an upload. 
          
          - If you are using multipart/form-data, please use the key `file` for the image file.

          - `Description` is optional.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                Name:
                  type: string
                  example: "Item 1"
                Description:
                  type: string
                  example: "This is item 1"
                Price:
                  type: integer
                  example: 100
              required:
                - Name
                - Description
                - Price
                - file
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Item created successfully!"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []

  /items/update/{_id}:
    put:
      summary: Update an item
      tags:
      - Items
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: Generated ID of the item to update 
      requestBody:
        description: |
          - This endpoint can accpet both multipart/form-data and application/json as it is edit. 
          
          - If you are using multipart/form-data, please use the key `file` for the image file.

          - `file` is optional

          - `Description` is optional.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                Name:
                  type: string
                  example: "Item 1"
                Description:
                  type: string
                  example: "This is item 1"
                Price:
                  type: integer
                  example: 100
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: "Item 1"
                Description:
                  type: string
                  example: "This is item 1"
                Price:
                  type: integer
                  example: 100
              required:
                - Name
                - Description
                - Price     

      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Item updated successfully!"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400': 
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
  
  /items/delete/{_id}:
    delete:
      summary: Delete an item
      tags:
      - Items
      parameters:
        - in: path
          name: _id
          schema:
            type: integer
          required: true
          description: Generated ID of the item to delete
      responses:
        '200':
          description: Item deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Item deleted successfully!"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Unauthorized"
        '404':
          description: "Item not found"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Item not found"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Internal server error"
      security:
        - bearerAuth: []
  
  # Toys
  /outfits:
    get:
      summary: Get all outfits
      tags:
        - Outfits
      responses:
        '200':
          description: Returns all registered outfits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Toy'
                    
        "401":
          $ref: '#/components/responses/UnauthorizedError'

        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /outfits/{_id}:
    get:
      summary: Get outfit by ID
      tags:
        - Outfits
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: ID of the outfit that generated by MongoDB
      responses:
        '200':
          description: Returns all registered outfits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
  
  /outfits/upload:
    post:
      summary: Create an outfit
      tags:
      - Outfits
      requestBody:
        description: |
          - This endpoint only accpet multipart/form-data as it is an upload. 
          
          - If you are using multipart/form-data, please use the key `file` for the image file.

          - `Description` is optional.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                Name:
                  type: string
                  example: "Outfit 1"
                Description:
                  type: string
                  example: "This is outfit 1"
                Price:
                  type: integer
                  example: 100
              required:
                - Name
                - Description
                - Price
                - file
      responses:
        '201':
          description: Outfit created successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Outfit created successfully!"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []

  /outfits/update/{_id}:
    put:
      summary: Update an Outfit
      tags:
      - Outfits
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: Generated ID of the Outfit to update 
      requestBody:
        description: |
          - This endpoint can accpet both multipart/form-data and application/json as it is edit. 
          
          - If you are using multipart/form-data, please use the key `file` for the image file.

          - `file` is optional

          - `Description` is optional.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                Name:
                  type: string
                  example: "Outfit 1"
                Description:
                  type: string
                  example: "This is Outfit 1"
                Price:
                  type: integer
                  example: 100
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: "Outfit 1"
                Description:
                  type: string
                  example: "This is Outfit 1"
                Price:
                  type: integer
                  example: 100
              required:
                - Name
                - Description
                - Price     
      responses:
        '200':
          description: Outfit updated successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Outfit updated successfully!"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400': 
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
        
  /outfits/delete/{_id}:
    delete:
      summary: Delete an Outfit
      tags:
      - Outfits
      parameters:
        - in: path
          name: _id
          schema:
            type: integer
          required: true
          description: Generated ID of the Outfit to delete
      responses:
        '200':
          description: Outfit deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Outfit deleted successfully!"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Unauthorized"
        '404':
          description: "Outfit not found"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Outfit not found"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Internal server error"
      security:
        - bearerAuth: []
    
  # Toys
  /toys:
    get:
      summary: Get all toys
      tags:
        - Toys
      responses:
        '200':
          description: Returns all registered toys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
                    
        "401":
          $ref: '#/components/responses/UnauthorizedError'

        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /toys/{_id}:
    get:
      summary: Get toy by ID
      tags:
        - Toys
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: ID of the toy that generated by MongoDB
      responses:
        '200':
          description: Returns all registered toys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
  
  /toys/upload:
    post:
      summary: Create an toy
      tags:
      - Toys
      requestBody:
        description: |
          - This endpoint only accpet multipart/form-data as it is an upload. 
          
          - If you are using multipart/form-data, please use the key `file` for the image file.

          - `Description` is optional.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                Name:
                  type: string
                  example: "Toy 1"
                Description:
                  type: string
                  example: "This is toy 1"
                Price:
                  type: integer
                  example: 100
              required:
                - Name
                - Description
                - Price
                - file
      responses:
        '201':
          description: Toy created successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Toy created successfully!"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
          - bearerAuth: []

  /toys/update/{_id}:
    put:
      summary: Update an Toy
      tags:
      - Toys
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
          description: Generated ID of the Toy to update 
      requestBody:
        description: |
          - This endpoint can accpet both multipart/form-data and application/json as it is edit. 
          
          - If you are using multipart/form-data, please use the key `file` for the image file.

          - `file` is optional

          - `Description` is optional.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                Name:
                  type: string
                  example: "Toy 1"
                Description:
                  type: string
                  example: "This is Toy 1"
                Price:
                  type: integer
                  example: 100
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: "Toy 1"
                Description:
                  type: string
                  example: "This is Toy 1"
                Price:
                  type: integer
                  example: 100
              required:
                - Name
                - Description
                - Price     
      responses:
        '200':
          description: Toy updated successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Toy updated successfully!"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400': 
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
        
  /toys/delete/{_id}:
    delete:
      summary: Delete an Toy
      tags:
      - Toys
      parameters:
        - in: path
          name: _id
          schema:
            type: integer
          required: true
          description: Generated ID of the Toy to delete
      responses:
        '200':
          description: Toy deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: false
                  message: "Toy deleted successfully!"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Unauthorized"
        '404':
          description: "Toy not found"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Toy not found"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                example: 
                  error: true
                  message: "Internal server error"
      security:
        - bearerAuth: []

  /Devices/register:
      post:
        description: Register a new device
        tags:
        - Devices
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  DeviceName:
                    type: string
                    example: "This is a new Device Name"
                  Email:
                    type: string
                    example: "demo_account_user199087+1@tanda.co"
                  Password:
                    type: string
                    example: "SOME_PASSWORD"
                required:
                  - DeviceName
                  - Email
                  - Password
        responses:
          '201':
            description: Device added successfully
            content:
              application/json:
                schema:
                  type: object
                  example: 
                    DeviceToken: "A Devicetoken generated"
          '403':
            description: "No permission"
            content:
              application/json:
                schema:
                  type: object
                  example: 
                    error: true
                    message: "No permission"
          '400':
            description: "Bad request"
            content:
              application/json:
                schema:
                  type: object
                  example: 
                    error: true
                    message: "Detail of missing or mailformed request body"
          '500':
            description: "Internal server error"
            content:
              application/json:
                schema:
                  type: object
                  example: 
                    error: true
                    message: "Internal server error"
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "123123123123 (Id generated by MongoDB)"
        Email:
          type: string
          example: "demo_account_user199087+1@tanda.co"
        Password:
          type: string
          example: "abcdxyzetc"
        Score:
          type: integer
          example: 9999
        Credits:
          type: integer
          example: 9999
        Badges:
          type: array
          items:
            type: object
            properties:
              BadgeId:
                type: string
                example: "234234 (Id generated by MongoDB)"
              DateAwarded:
                type: string
                example: "1684324234 (unix timestamp)"
        Inventory:
          type: array
          items:
            type: object
            properties:
              ToyId:
                type: string
                example: "234234"
              quantity:
                type: integer
                example: 100      
        OutfitInventory:
          type: array
          items:
            type: object
            properties:
              OutfitId:
                type: string
                example: "234234"
              Equipped:
                type: boolean
                example: true

    Badge:
      type: object
      properties:
        _id:
          type: string
          example: "123123123123 (Id generated by MongoDB)"
        Title:
          type: string
          example: "Never late warrior"
        Description:
          type: string
          example: "This badge rewarded for never late employee"
        ImageURL:
          type: string
          example: "BadgeImage1.png"

    Item:
      type: object
      properties:
        _id:
          type: string
          example: "An Id generated by MongoDB"
        Name:
          type: string
          example: "Item 1"
        Description:
          type: string
          example: "This is item 1"
        Price:
          type: integer
          example: 100
        ImageURL:
          type: string
          example: "Imageabcde.png"

    Outfit:
      type: object
      properties:
        _id:
          type: string
          example: "An Id generated by MongoDB"
        Name:
          type: string
          example: "Outfit 1"
        Description:
          type: string
          example: "This is outfit 1"
        Price:
          type: integer
          example: 100
        ImageURL:
          type: string
          example: "Imageabcde.png"
    
    Toy:
      type: object
      properties:
        _id:
          type: string
          example: "An Id generated by MongoDB"
        Name:
          type: string
          example: "Outfit 1"
        Description:
          type: string
          example: "This is outfit 1"
        Price:
          type: integer
          example: 100
        ImageURL:
          type: string
          example: "Imageabcde.png"

  responses:
    UnauthorizedError:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              message:
                type: string
                example: "Unauthorized"

    InvalidParameterError:
      description: "Invalid Parameter"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              message:
                type: string
                example: "Invalid Parameter messages depend on problem"

    InternalServerError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              message:
                type: string
                example: "Internal Server Error"

    NotFoundError:
      description: "Entity not found with provided credential"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              message:
                type: string    
                example: "Resource not found with provided credential"
    
    BadRequestError:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              message:
                type: string    
                example: "Detail of missing or mailformed request body depend on the problem this message can be different"
 
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
